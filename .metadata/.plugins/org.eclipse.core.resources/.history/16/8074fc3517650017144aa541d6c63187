package Query;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import dbconnection.DBConnection;
import util.JDBCUtils;

/**
 * 这个类提供了JDBC的模板操作，但是必须在tomcat中运行。
 * 
 *
 */


public class Query {
	
	/**
	 * 增、删、改 JDBC操作的模板方法
	 * tomcat
	 * @param sql sql语句
	 * @param params sql语句的参数
	 * @return sql语句影响的行数，若出错则返回-1.
	 */
	public static int executeDML(String sql, Object[] params){
		
		Connection conn = DBConnection.getConnection();
		PreparedStatement ps = null;
		try {
			ps = conn.prepareStatement(sql);
			JDBCUtils.handleParamsForPreparedStatement(ps, params);
			return ps.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}finally{
			DBConnection.closeConnection(conn,ps);
		}
		
	}
	
	
	/**
	 * 执行JDBC查询操作 的模板方法，通过回掉实现对查询返回对象的封装。
	 * tomcat
	 * @param sql sql语句
	 * @param params sql参数
	 * @param back QueryCallBack的实现类，实现回掉。
	 * @return 
	 */
	public static Object executeQueryTemplate(String sql,Object[] params,QueryCallBack back){
		Connection conn = DBConnection.getConnection();
		PreparedStatement ps =null;
		ResultSet rs = null;
		try {
			ps = conn.prepareStatement(sql);
			JDBCUtils.handleParamsForPreparedStatement(ps, params);
			rs = ps.executeQuery();
			return back.doExecute(rs);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}finally{
			DBConnection.closeConnection(conn,ps,rs);
		}
	}
	
	
	/**
	 * 
	 * @param sql
	 * @param params
	 * @return
	 */
	public static int[] executeDMLBatch(String sql, List<Object[]> params){
		Connection conn = DBConnection.getConnection();
		PreparedStatement ps =null;
		int[] result = null;
		try {
			conn.setAutoCommit(false);
			ps = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
			for(Object[] param : params){
				JDBCUtils.handleParamsForPreparedStatement(ps, param);
				ps.addBatch();
			}
			result = ps.executeBatch();
			conn.commit();
		} catch (SQLException e) {
			result = null;
			e.printStackTrace();
		} finally{
			DBConnection.closeConnection(conn,ps);
		}
		return result;
	}
	
	public static int[] executeDMLBatchWithSingleParams(String sql, Object[] params){
		int length = params.length;
		ArrayList<Object[]> paramsTemp = new ArrayList<>(length);
		for(int i = 0; i < length; i++){
			paramsTemp.set(i, new Object[]{params[i]});
		}
		return Query.executeDMLBatch(sql, paramsTemp);
	}
	
//	public static void main(String[] args) {
//		String name = (String) Query.executeQueryTemplate("select * from url", null, new QueryCallBack() {
//
//			public Object doExecute(ResultSet rs) {
//				try {
//					while (rs.next()){
//						return rs.getString("url");
//					}
//					return null;
//				} catch (SQLException e) {
//					e.printStackTrace();
//					return null;
//				}
//			}
//			
//		});
//		System.out.println(name);
//		ArrayList<Object[]> params = new ArrayList<>();
//		params.add(new Object[]{"aaa"});
//		params.add(new Object[]{"bbb"});
//		System.out.println(
//				Arrays.toString(Query.executeDMLBatch("INSERT INTO `pagerank`.`url_mes` (`url`) VALUES (?)",params)));
//	}
}
