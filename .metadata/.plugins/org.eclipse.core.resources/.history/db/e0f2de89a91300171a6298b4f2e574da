package model;

import java.util.*;
import java.util.Map.Entry;

import util.Entropy;
import util.loadData;

public class Node {

	String attribute;

	double Gain = 0.0;
	int positiveNum = 0;
	int negativeNum = 0;
	String finalAtt;

	Set<Example> examples = new HashSet<Example>();

	public Node(Set<Example> examples) {
		this.examples = examples;
	}

	public void grow() {

		Set<String> attributes = examples.iterator().next().map.keySet();
		attributes.remove(loadData.Category);

		for (Example E : examples) {
			if (E.getPlay().equals("yes"))
				positiveNum++;
			else
				negativeNum++;
		}

		// 根节点标志
		if (positiveNum == 0 || negativeNum == 0) {
			return;
		} else {

			// 计算经验熵
			Entropy splitor = new Entropy(examples);
			Gain = splitor.CalEntropy();

			// 计算熵值
			// 遍历所有属性
			double max = 0.0;
			for (String attribute : attributes) {

				String[] values = loadData.Attributes.get(attribute);
				/* 属性划分产生的不同集合 */
				int count = 0;
				HashMap<String, Set<Example>> exampleSet = new HashMap<String, Set<Example>>();

				for (int i = 0; i < values.length; i++) {
					Set<Example> set = new HashSet<Example>();
					exampleSet.put(values[i], set);
				}
				// 遍历所有样本
				for (Example example : examples) {
					// 判别样本归属
					String value = example.getValue(attribute);
					for (int i = 0; i < values.length; i++) {
						if (value.equals(values[i])) {
							exampleSet.get(values[i]).add(example);
							count++;
						}
					}
				}

				// 计算信息增益并确定最优划分属性finalAtt
				double Ent = 0.0;
				for (Entry<String, Set<Example>> entry : exampleSet.entrySet()) {
					Set<Example> set = (Set<Example>) entry.getValue();
					Entropy en = new Entropy(set);
					int n = set.size();
					double cal = en.CalEntropy();
					Ent += ((double) n / (double) count) * cal;
				}
				System.out.println(attribute + "属性的信息增益为：" + (Gain - Ent));

				if (Gain - Ent > max) {
					finalAtt = attribute;
					max = Gain - Ent;
				}
			}

			this.setAttribute(finalAtt);
			System.out.println("最优属性为：" + finalAtt);

			// 删去样本集中目标属性
			Set<Example> newexamples = new HashSet<Example>();
				for (Example ex : examples) {
					ex.map.remove(finalAtt);
					if(ex.map.size()==1)
						break;
					newexamples.add(ex);
					Node newNode = new Node(newexamples);
					newNode.grow();
				}
			}

	}

	public String getAttribute() {
		return attribute;
	}

	public void setAttribute(String attribute) {
		this.attribute = attribute;
	}
}
