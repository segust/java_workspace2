package hadoop;

import java.io.IOException;
import java.util.Arrays;
import java.util.*;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.TwoDArrayWritable;
import org.apache.hadoop.mapreduce.Reducer;

import model.vehicleMap;

public class vReduce extends Reducer<Text, Text, Text, TwoDArrayWritable> {

	public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
		Text info[][] = new Text[0][2];
		ArrayList<String> pass = new ArrayList<String>();
		for (Text val : values) {
			int i;
			boolean find = false;
			for (i = 0; i < info.length; i++) {
				if (info[i][0].equals(val)) {
					find = true;
					break;
				}
			}
			if (find == true) {
				Text a = info[i][1];
				int b = Integer.getInteger(a.toString());
				b++;
				info[i][1] = new Text(String.valueOf(b));
			} else {
				info = Arrays.copyOf(info, info.length + 1);
				info[info.length - 1][0] = val;
				info[info.length - 1][1] = new Text("1");
			}
		}
		for (int i = 0; i < info.length - 2; i++)
			for (int j = i + 1; j < info.length - 1; j++) {
				if (Integer.valueOf(info[i][1].toString()) < Integer.valueOf(info[j][1].toString())) {
					Text temp[][] = new Text[1][1];
					temp[0][0] = info[i][0];
					temp[0][1] = info[i][1];
					info[i][0] = info[j][0];
					info[i][1] = info[j][1];
					info[j][0] = temp[0][0];
					info[j][1] = temp[0][1];
				}
			}
		for (int i = 0; i < info.length - 1; i++) {
			pass.add(info[i][0].toString());
		}
		vehicleMap.infoMap.put(key.toString(), pass);
		TwoDArrayWritable ary = new TwoDArrayWritable(Text.class, info);
		context.write(key, ary);
	}

}
